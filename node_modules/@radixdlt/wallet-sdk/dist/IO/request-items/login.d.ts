import { LoginReadRequestItem, LoginResponseItem } from '../schemas';
export type Login = {
    WithoutChallenge: {
        wallet: {
            request: LoginReadRequestItem;
            response: LoginResponseItem;
        };
        method: {
            input: {};
            output: {
                login: {
                    personaId: string;
                };
            };
        };
    };
    WithChallenge: {
        wallet: {
            request: LoginReadRequestItem;
            response: LoginResponseItem;
        };
        method: {
            output: {
                login: {
                    challenge: string;
                    personaId: string;
                    publicKey: string;
                    signature: string;
                    identityComponentAddress: string;
                };
            };
            input: {
                challenge: string;
            };
        };
    };
};
type NotAllowedKeys = Partial<{
    persona: any;
    loginWithoutChallenge: any;
    loginWithChallenge: any;
}>;
export declare const login: {
    withoutChallenge: () => <I>(input: I extends Partial<{
        persona: any;
        loginWithoutChallenge: any;
        loginWithChallenge: any;
    }> ? never : I) => (I extends Partial<{
        persona: any;
        loginWithoutChallenge: any;
        loginWithChallenge: any;
    }> ? never : I) & {
        loginWithoutChallenge: {};
    };
    withChallenge: (challenge: string) => <I_1>(input: I_1 extends Partial<{
        persona: any;
        loginWithoutChallenge: any;
        loginWithChallenge: any;
    }> ? never : I_1) => (I_1 extends Partial<{
        persona: any;
        loginWithoutChallenge: any;
        loginWithChallenge: any;
    }> ? never : I_1) & {
        loginWithChallenge: {
            challenge: string;
        };
    };
};
export {};
