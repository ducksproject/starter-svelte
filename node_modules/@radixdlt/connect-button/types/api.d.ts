import WalletSdk, { WalletSdk as WalletSdkType } from '@radixdlt/wallet-sdk';
import { Observable, Subject } from 'rxjs';
type ButtonState = {
    connected: boolean;
    loading: boolean;
};
export type RadixConnectButtonApi = {
    getWalletData: WalletSdkType['request'];
    sendTransaction: WalletSdkType['sendTransaction'];
    setState: (input: Partial<ButtonState>) => void;
    destroy: () => void;
    onConnect$: Observable<void>;
};
export declare const onConnectSubject: Subject<void>;
export declare const onDisconnectSubject: Subject<void>;
export declare const onDestroySubject: Subject<void>;
export declare const onCancelSubject: Subject<void>;
export declare const configure: (input: {
    networkId?: number | undefined;
    dAppId: string;
    logLevel?: import("loglevel").LogLevelDesc | undefined;
} & {
    initialState?: Partial<ButtonState> | undefined;
    onConnect: (buttonApi: RadixConnectButtonApi) => void;
    onDisconnect: (buttonApi: RadixConnectButtonApi) => void;
    onCancel?: (() => void) | undefined;
    onDestroy?: (() => void) | undefined;
}) => {
    getWalletData: <Input extends Partial<{
        oneTimeAccountsWithoutProofOfOwnership: {
            numberOfAccounts?: number | undefined;
        };
    }>, Output extends keyof Input extends "oneTimeAccountsWithoutProofOfOwnership" ? { [Key in keyof Input]: (x: {
        oneTimeAccountsWithoutProofOfOwnership: {
            oneTimeAccounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        };
    }[Key]) => void; }[keyof Input] extends (x: infer T) => void ? T : never : never>(input: Input, callbackFns?: Partial<import("@radixdlt/wallet-sdk/dist/messages/events/_types").CallbackFns> | undefined) => import("neverthrow").ResultAsync<Output, import("@radixdlt/wallet-sdk/dist/helpers/error").SdkError>;
    sendTransaction: (input: {
        transactionManifest: string;
        version: number;
        blobs?: string[] | undefined;
        message?: string | undefined;
    }, callbackFns?: Partial<import("@radixdlt/wallet-sdk/dist/messages/events/_types").CallbackFns> | undefined) => import("neverthrow").ResultAsync<{
        transactionIntentHash: string;
    }, import("@radixdlt/wallet-sdk/dist/helpers/error").SdkError>;
    setState: ({ connected, loading }: Partial<ButtonState>) => void;
    destroy: () => void;
    onConnect$: Observable<void>;
};
export declare const getMethods: () => RadixConnectButtonApi;
export {};
