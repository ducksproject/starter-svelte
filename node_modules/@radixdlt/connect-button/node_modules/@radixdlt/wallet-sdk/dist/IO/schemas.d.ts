import z from 'zod';
export declare const RequestTypeSchema: {
    readonly oneTimeAccountsRead: z.ZodLiteral<"oneTimeAccountsRead">;
    readonly ongoingAccountsRead: z.ZodLiteral<"ongoingAccountsRead">;
    readonly oneTimePersonaDataRead: z.ZodLiteral<"oneTimePersonaDataRead">;
    readonly ongoingPersonaDataRead: z.ZodLiteral<"ongoingPersonaDataRead">;
    readonly usePersonaRead: z.ZodLiteral<"usePersonaRead">;
    readonly loginRead: z.ZodLiteral<"loginRead">;
    readonly sendTransactionWrite: z.ZodLiteral<"sendTransactionWrite">;
};
export declare const ErrorTypeSchema: z.ZodLiteral<"rejectedByUser">;
declare const AccountSchema: z.ZodObject<{
    address: z.ZodString;
    label: z.ZodString;
    appearanceId: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    address: string;
    label: string;
    appearanceId: number;
}, {
    address: string;
    label: string;
    appearanceId: number;
}>;
declare const AccountWithProofOfOwnershipSchema: z.ZodObject<{
    account: z.ZodObject<{
        address: z.ZodString;
        label: z.ZodString;
        appearanceId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        address: string;
        label: string;
        appearanceId: number;
    }, {
        address: string;
        label: string;
        appearanceId: number;
    }>;
    challenge: z.ZodString;
    signature: z.ZodString;
}, "strip", z.ZodTypeAny, {
    account: {
        address: string;
        label: string;
        appearanceId: number;
    };
    challenge: string;
    signature: string;
}, {
    account: {
        address: string;
        label: string;
        appearanceId: number;
    };
    challenge: string;
    signature: string;
}>;
declare const PersonaDataFieldSchema: z.ZodObject<{
    field: z.ZodString;
    value: z.ZodString;
}, "strip", z.ZodTypeAny, {
    value: string;
    field: string;
}, {
    value: string;
    field: string;
}>;
declare const MetadataSchema: z.ZodObject<{
    networkId: z.ZodNumber;
    dAppId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    networkId: number;
    dAppId: string;
}, {
    networkId: number;
    dAppId: string;
}>;
declare const OneTimeAccountsReadRequestItemSchema: z.ZodObject<{
    requestType: z.ZodLiteral<"oneTimeAccountsRead">;
    requiresProofOfOwnership: z.ZodBoolean;
    numberOfAccounts: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    numberOfAccounts?: number | undefined;
    requestType: "oneTimeAccountsRead";
    requiresProofOfOwnership: boolean;
}, {
    numberOfAccounts?: number | undefined;
    requestType: "oneTimeAccountsRead";
    requiresProofOfOwnership: boolean;
}>;
declare const OneTimeAccountsWithProofOfOwnershipResponseItemSchema: z.ZodObject<{
    requestType: z.ZodLiteral<"oneTimeAccountsRead">;
    accounts: z.ZodArray<z.ZodObject<{
        account: z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>;
        challenge: z.ZodString;
        signature: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }, {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    requestType: "oneTimeAccountsRead";
    accounts: {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }[];
}, {
    requestType: "oneTimeAccountsRead";
    accounts: {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }[];
}>;
declare const OneTimeAccountsWithoutProofOfOwnershipResponseItemSchema: z.ZodObject<{
    requestType: z.ZodLiteral<"oneTimeAccountsRead">;
    accounts: z.ZodArray<z.ZodObject<{
        address: z.ZodString;
        label: z.ZodString;
        appearanceId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        address: string;
        label: string;
        appearanceId: number;
    }, {
        address: string;
        label: string;
        appearanceId: number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    requestType: "oneTimeAccountsRead";
    accounts: {
        address: string;
        label: string;
        appearanceId: number;
    }[];
}, {
    requestType: "oneTimeAccountsRead";
    accounts: {
        address: string;
        label: string;
        appearanceId: number;
    }[];
}>;
export declare const OneTimeAccountsResponseItemSchema: z.ZodUnion<[z.ZodObject<{
    requestType: z.ZodLiteral<"oneTimeAccountsRead">;
    accounts: z.ZodArray<z.ZodObject<{
        account: z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>;
        challenge: z.ZodString;
        signature: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }, {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    requestType: "oneTimeAccountsRead";
    accounts: {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }[];
}, {
    requestType: "oneTimeAccountsRead";
    accounts: {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }[];
}>, z.ZodObject<{
    requestType: z.ZodLiteral<"oneTimeAccountsRead">;
    accounts: z.ZodArray<z.ZodObject<{
        address: z.ZodString;
        label: z.ZodString;
        appearanceId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        address: string;
        label: string;
        appearanceId: number;
    }, {
        address: string;
        label: string;
        appearanceId: number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    requestType: "oneTimeAccountsRead";
    accounts: {
        address: string;
        label: string;
        appearanceId: number;
    }[];
}, {
    requestType: "oneTimeAccountsRead";
    accounts: {
        address: string;
        label: string;
        appearanceId: number;
    }[];
}>]>;
declare const OngoingAccountsReadRequestItemSchema: z.ZodObject<{
    requestType: z.ZodLiteral<"ongoingAccountsRead">;
    requiresProofOfOwnership: z.ZodBoolean;
    numberOfAccounts: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    numberOfAccounts?: number | undefined;
    requestType: "ongoingAccountsRead";
    requiresProofOfOwnership: boolean;
}, {
    numberOfAccounts?: number | undefined;
    requestType: "ongoingAccountsRead";
    requiresProofOfOwnership: boolean;
}>;
declare const OngoingAccountsResponseItemSchema: z.ZodUnion<[z.ZodObject<{
    requestType: z.ZodLiteral<"ongoingAccountsRead">;
    accounts: z.ZodArray<z.ZodObject<{
        account: z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>;
        challenge: z.ZodString;
        signature: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }, {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    requestType: "ongoingAccountsRead";
    accounts: {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }[];
}, {
    requestType: "ongoingAccountsRead";
    accounts: {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }[];
}>, z.ZodObject<{
    requestType: z.ZodLiteral<"ongoingAccountsRead">;
    accounts: z.ZodArray<z.ZodObject<{
        address: z.ZodString;
        label: z.ZodString;
        appearanceId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        address: string;
        label: string;
        appearanceId: number;
    }, {
        address: string;
        label: string;
        appearanceId: number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    requestType: "ongoingAccountsRead";
    accounts: {
        address: string;
        label: string;
        appearanceId: number;
    }[];
}, {
    requestType: "ongoingAccountsRead";
    accounts: {
        address: string;
        label: string;
        appearanceId: number;
    }[];
}>]>;
declare const OneTimePersonaDataReadRequestItemSchema: z.ZodObject<{
    requestType: z.ZodLiteral<"oneTimePersonaDataRead">;
    fields: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    requestType: "oneTimePersonaDataRead";
    fields: string[];
}, {
    requestType: "oneTimePersonaDataRead";
    fields: string[];
}>;
declare const OneTimePersonaDataResponseItemSchema: z.ZodObject<{
    requestType: z.ZodLiteral<"oneTimePersonaDataRead">;
    fields: z.ZodArray<z.ZodObject<{
        field: z.ZodString;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        value: string;
        field: string;
    }, {
        value: string;
        field: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    requestType: "oneTimePersonaDataRead";
    fields: {
        value: string;
        field: string;
    }[];
}, {
    requestType: "oneTimePersonaDataRead";
    fields: {
        value: string;
        field: string;
    }[];
}>;
declare const OngoingPersonaDataReadRequestItemSchema: z.ZodObject<{
    requestType: z.ZodLiteral<"ongoingPersonaDataRead">;
    fields: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    requestType: "ongoingPersonaDataRead";
    fields: string[];
}, {
    requestType: "ongoingPersonaDataRead";
    fields: string[];
}>;
declare const OngoingPersonaDataResponseItemSchema: z.ZodObject<{
    requestType: z.ZodLiteral<"ongoingPersonaDataRead">;
    fields: z.ZodArray<z.ZodObject<{
        field: z.ZodString;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        value: string;
        field: string;
    }, {
        value: string;
        field: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    requestType: "ongoingPersonaDataRead";
    fields: {
        value: string;
        field: string;
    }[];
}, {
    requestType: "ongoingPersonaDataRead";
    fields: {
        value: string;
        field: string;
    }[];
}>;
declare const UsePersonaReadRequestItemSchema: z.ZodObject<{
    requestType: z.ZodLiteral<"usePersonaRead">;
    id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    requestType: "usePersonaRead";
    id: string;
}, {
    requestType: "usePersonaRead";
    id: string;
}>;
declare const UsePersonaResponseItemSchema: z.ZodObject<{
    requestType: z.ZodLiteral<"usePersonaRead">;
    id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    requestType: "usePersonaRead";
    id: string;
}, {
    requestType: "usePersonaRead";
    id: string;
}>;
declare const LoginReadRequestItemSchema: z.ZodObject<{
    requestType: z.ZodLiteral<"loginRead">;
    challenge: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    challenge?: string | undefined;
    requestType: "loginRead";
}, {
    challenge?: string | undefined;
    requestType: "loginRead";
}>;
declare const LoginWithoutChallengeResponseItemSchema: z.ZodObject<{
    requestType: z.ZodLiteral<"loginRead">;
    personaId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    requestType: "loginRead";
    personaId: string;
}, {
    requestType: "loginRead";
    personaId: string;
}>;
declare const LoginWithChallengeResponseItemSchema: z.ZodObject<{
    requestType: z.ZodLiteral<"loginRead">;
    personaId: z.ZodString;
    challenge: z.ZodString;
    publicKey: z.ZodString;
    signature: z.ZodString;
    identityComponentAddress: z.ZodString;
}, "strip", z.ZodTypeAny, {
    challenge: string;
    signature: string;
    requestType: "loginRead";
    personaId: string;
    publicKey: string;
    identityComponentAddress: string;
}, {
    challenge: string;
    signature: string;
    requestType: "loginRead";
    personaId: string;
    publicKey: string;
    identityComponentAddress: string;
}>;
declare const LoginResponseItemSchema: z.ZodUnion<[z.ZodObject<{
    requestType: z.ZodLiteral<"loginRead">;
    personaId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    requestType: "loginRead";
    personaId: string;
}, {
    requestType: "loginRead";
    personaId: string;
}>, z.ZodObject<{
    requestType: z.ZodLiteral<"loginRead">;
    personaId: z.ZodString;
    challenge: z.ZodString;
    publicKey: z.ZodString;
    signature: z.ZodString;
    identityComponentAddress: z.ZodString;
}, "strip", z.ZodTypeAny, {
    challenge: string;
    signature: string;
    requestType: "loginRead";
    personaId: string;
    publicKey: string;
    identityComponentAddress: string;
}, {
    challenge: string;
    signature: string;
    requestType: "loginRead";
    personaId: string;
    publicKey: string;
    identityComponentAddress: string;
}>]>;
declare const SendTransactionWriteRequestItemSchema: z.ZodObject<{
    requestType: z.ZodLiteral<"sendTransactionWrite">;
    transactionManifest: z.ZodString;
    version: z.ZodNumber;
    blobs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    message: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message?: string | undefined;
    blobs?: string[] | undefined;
    requestType: "sendTransactionWrite";
    transactionManifest: string;
    version: number;
}, {
    message?: string | undefined;
    blobs?: string[] | undefined;
    requestType: "sendTransactionWrite";
    transactionManifest: string;
    version: number;
}>;
declare const SendTransactionResponseItemSchema: z.ZodObject<{
    requestType: z.ZodLiteral<"sendTransactionWrite">;
    transactionIntentHash: z.ZodString;
}, "strip", z.ZodTypeAny, {
    requestType: "sendTransactionWrite";
    transactionIntentHash: string;
}, {
    requestType: "sendTransactionWrite";
    transactionIntentHash: string;
}>;
declare const RequestItemSchema: z.ZodUnion<[z.ZodObject<{
    requestType: z.ZodLiteral<"oneTimeAccountsRead">;
    requiresProofOfOwnership: z.ZodBoolean;
    numberOfAccounts: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    numberOfAccounts?: number | undefined;
    requestType: "oneTimeAccountsRead";
    requiresProofOfOwnership: boolean;
}, {
    numberOfAccounts?: number | undefined;
    requestType: "oneTimeAccountsRead";
    requiresProofOfOwnership: boolean;
}>, z.ZodObject<{
    requestType: z.ZodLiteral<"sendTransactionWrite">;
    transactionManifest: z.ZodString;
    version: z.ZodNumber;
    blobs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    message: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message?: string | undefined;
    blobs?: string[] | undefined;
    requestType: "sendTransactionWrite";
    transactionManifest: string;
    version: number;
}, {
    message?: string | undefined;
    blobs?: string[] | undefined;
    requestType: "sendTransactionWrite";
    transactionManifest: string;
    version: number;
}>]>;
declare const ResponseItemSchema: z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
    requestType: z.ZodLiteral<"oneTimeAccountsRead">;
    accounts: z.ZodArray<z.ZodObject<{
        account: z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>;
        challenge: z.ZodString;
        signature: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }, {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    requestType: "oneTimeAccountsRead";
    accounts: {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }[];
}, {
    requestType: "oneTimeAccountsRead";
    accounts: {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }[];
}>, z.ZodObject<{
    requestType: z.ZodLiteral<"oneTimeAccountsRead">;
    accounts: z.ZodArray<z.ZodObject<{
        address: z.ZodString;
        label: z.ZodString;
        appearanceId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        address: string;
        label: string;
        appearanceId: number;
    }, {
        address: string;
        label: string;
        appearanceId: number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    requestType: "oneTimeAccountsRead";
    accounts: {
        address: string;
        label: string;
        appearanceId: number;
    }[];
}, {
    requestType: "oneTimeAccountsRead";
    accounts: {
        address: string;
        label: string;
        appearanceId: number;
    }[];
}>]>, z.ZodUnion<[z.ZodObject<{
    requestType: z.ZodLiteral<"ongoingAccountsRead">;
    accounts: z.ZodArray<z.ZodObject<{
        account: z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>;
        challenge: z.ZodString;
        signature: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }, {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    requestType: "ongoingAccountsRead";
    accounts: {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }[];
}, {
    requestType: "ongoingAccountsRead";
    accounts: {
        account: {
            address: string;
            label: string;
            appearanceId: number;
        };
        challenge: string;
        signature: string;
    }[];
}>, z.ZodObject<{
    requestType: z.ZodLiteral<"ongoingAccountsRead">;
    accounts: z.ZodArray<z.ZodObject<{
        address: z.ZodString;
        label: z.ZodString;
        appearanceId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        address: string;
        label: string;
        appearanceId: number;
    }, {
        address: string;
        label: string;
        appearanceId: number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    requestType: "ongoingAccountsRead";
    accounts: {
        address: string;
        label: string;
        appearanceId: number;
    }[];
}, {
    requestType: "ongoingAccountsRead";
    accounts: {
        address: string;
        label: string;
        appearanceId: number;
    }[];
}>]>, z.ZodObject<{
    requestType: z.ZodLiteral<"oneTimePersonaDataRead">;
    fields: z.ZodArray<z.ZodObject<{
        field: z.ZodString;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        value: string;
        field: string;
    }, {
        value: string;
        field: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    requestType: "oneTimePersonaDataRead";
    fields: {
        value: string;
        field: string;
    }[];
}, {
    requestType: "oneTimePersonaDataRead";
    fields: {
        value: string;
        field: string;
    }[];
}>, z.ZodObject<{
    requestType: z.ZodLiteral<"ongoingPersonaDataRead">;
    fields: z.ZodArray<z.ZodObject<{
        field: z.ZodString;
        value: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        value: string;
        field: string;
    }, {
        value: string;
        field: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    requestType: "ongoingPersonaDataRead";
    fields: {
        value: string;
        field: string;
    }[];
}, {
    requestType: "ongoingPersonaDataRead";
    fields: {
        value: string;
        field: string;
    }[];
}>, z.ZodObject<{
    requestType: z.ZodLiteral<"usePersonaRead">;
    id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    requestType: "usePersonaRead";
    id: string;
}, {
    requestType: "usePersonaRead";
    id: string;
}>, z.ZodUnion<[z.ZodObject<{
    requestType: z.ZodLiteral<"loginRead">;
    personaId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    requestType: "loginRead";
    personaId: string;
}, {
    requestType: "loginRead";
    personaId: string;
}>, z.ZodObject<{
    requestType: z.ZodLiteral<"loginRead">;
    personaId: z.ZodString;
    challenge: z.ZodString;
    publicKey: z.ZodString;
    signature: z.ZodString;
    identityComponentAddress: z.ZodString;
}, "strip", z.ZodTypeAny, {
    challenge: string;
    signature: string;
    requestType: "loginRead";
    personaId: string;
    publicKey: string;
    identityComponentAddress: string;
}, {
    challenge: string;
    signature: string;
    requestType: "loginRead";
    personaId: string;
    publicKey: string;
    identityComponentAddress: string;
}>]>, z.ZodObject<{
    requestType: z.ZodLiteral<"sendTransactionWrite">;
    transactionIntentHash: z.ZodString;
}, "strip", z.ZodTypeAny, {
    requestType: "sendTransactionWrite";
    transactionIntentHash: string;
}, {
    requestType: "sendTransactionWrite";
    transactionIntentHash: string;
}>]>;
export declare const WalletRequestSchema: z.ZodObject<{
    requestId: z.ZodString;
    items: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        requestType: z.ZodLiteral<"oneTimeAccountsRead">;
        requiresProofOfOwnership: z.ZodBoolean;
        numberOfAccounts: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        numberOfAccounts?: number | undefined;
        requestType: "oneTimeAccountsRead";
        requiresProofOfOwnership: boolean;
    }, {
        numberOfAccounts?: number | undefined;
        requestType: "oneTimeAccountsRead";
        requiresProofOfOwnership: boolean;
    }>, z.ZodObject<{
        requestType: z.ZodLiteral<"sendTransactionWrite">;
        transactionManifest: z.ZodString;
        version: z.ZodNumber;
        blobs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        message: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        message?: string | undefined;
        blobs?: string[] | undefined;
        requestType: "sendTransactionWrite";
        transactionManifest: string;
        version: number;
    }, {
        message?: string | undefined;
        blobs?: string[] | undefined;
        requestType: "sendTransactionWrite";
        transactionManifest: string;
        version: number;
    }>]>, "many">;
    metadata: z.ZodObject<{
        networkId: z.ZodNumber;
        dAppId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        networkId: number;
        dAppId: string;
    }, {
        networkId: number;
        dAppId: string;
    }>;
}, "strip", z.ZodTypeAny, {
    requestId: string;
    items: ({
        numberOfAccounts?: number | undefined;
        requestType: "oneTimeAccountsRead";
        requiresProofOfOwnership: boolean;
    } | {
        message?: string | undefined;
        blobs?: string[] | undefined;
        requestType: "sendTransactionWrite";
        transactionManifest: string;
        version: number;
    })[];
    metadata: {
        networkId: number;
        dAppId: string;
    };
}, {
    requestId: string;
    items: ({
        numberOfAccounts?: number | undefined;
        requestType: "oneTimeAccountsRead";
        requiresProofOfOwnership: boolean;
    } | {
        message?: string | undefined;
        blobs?: string[] | undefined;
        requestType: "sendTransactionWrite";
        transactionManifest: string;
        version: number;
    })[];
    metadata: {
        networkId: number;
        dAppId: string;
    };
}>;
export declare const WalletSuccessResponseSchema: z.ZodObject<{
    requestId: z.ZodString;
    items: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        requestType: z.ZodLiteral<"oneTimeAccountsRead">;
        accounts: z.ZodArray<z.ZodObject<{
            account: z.ZodObject<{
                address: z.ZodString;
                label: z.ZodString;
                appearanceId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                address: string;
                label: string;
                appearanceId: number;
            }, {
                address: string;
                label: string;
                appearanceId: number;
            }>;
            challenge: z.ZodString;
            signature: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }, {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        requestType: "oneTimeAccountsRead";
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    }, {
        requestType: "oneTimeAccountsRead";
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    }>, z.ZodObject<{
        requestType: z.ZodLiteral<"oneTimeAccountsRead">;
        accounts: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        requestType: "oneTimeAccountsRead";
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    }, {
        requestType: "oneTimeAccountsRead";
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    }>]>, z.ZodUnion<[z.ZodObject<{
        requestType: z.ZodLiteral<"ongoingAccountsRead">;
        accounts: z.ZodArray<z.ZodObject<{
            account: z.ZodObject<{
                address: z.ZodString;
                label: z.ZodString;
                appearanceId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                address: string;
                label: string;
                appearanceId: number;
            }, {
                address: string;
                label: string;
                appearanceId: number;
            }>;
            challenge: z.ZodString;
            signature: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }, {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        requestType: "ongoingAccountsRead";
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    }, {
        requestType: "ongoingAccountsRead";
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    }>, z.ZodObject<{
        requestType: z.ZodLiteral<"ongoingAccountsRead">;
        accounts: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        requestType: "ongoingAccountsRead";
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    }, {
        requestType: "ongoingAccountsRead";
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    }>]>, z.ZodObject<{
        requestType: z.ZodLiteral<"oneTimePersonaDataRead">;
        fields: z.ZodArray<z.ZodObject<{
            field: z.ZodString;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
            field: string;
        }, {
            value: string;
            field: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        requestType: "oneTimePersonaDataRead";
        fields: {
            value: string;
            field: string;
        }[];
    }, {
        requestType: "oneTimePersonaDataRead";
        fields: {
            value: string;
            field: string;
        }[];
    }>, z.ZodObject<{
        requestType: z.ZodLiteral<"ongoingPersonaDataRead">;
        fields: z.ZodArray<z.ZodObject<{
            field: z.ZodString;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
            field: string;
        }, {
            value: string;
            field: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        requestType: "ongoingPersonaDataRead";
        fields: {
            value: string;
            field: string;
        }[];
    }, {
        requestType: "ongoingPersonaDataRead";
        fields: {
            value: string;
            field: string;
        }[];
    }>, z.ZodObject<{
        requestType: z.ZodLiteral<"usePersonaRead">;
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        requestType: "usePersonaRead";
        id: string;
    }, {
        requestType: "usePersonaRead";
        id: string;
    }>, z.ZodUnion<[z.ZodObject<{
        requestType: z.ZodLiteral<"loginRead">;
        personaId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        requestType: "loginRead";
        personaId: string;
    }, {
        requestType: "loginRead";
        personaId: string;
    }>, z.ZodObject<{
        requestType: z.ZodLiteral<"loginRead">;
        personaId: z.ZodString;
        challenge: z.ZodString;
        publicKey: z.ZodString;
        signature: z.ZodString;
        identityComponentAddress: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        challenge: string;
        signature: string;
        requestType: "loginRead";
        personaId: string;
        publicKey: string;
        identityComponentAddress: string;
    }, {
        challenge: string;
        signature: string;
        requestType: "loginRead";
        personaId: string;
        publicKey: string;
        identityComponentAddress: string;
    }>]>, z.ZodObject<{
        requestType: z.ZodLiteral<"sendTransactionWrite">;
        transactionIntentHash: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        requestType: "sendTransactionWrite";
        transactionIntentHash: string;
    }, {
        requestType: "sendTransactionWrite";
        transactionIntentHash: string;
    }>]>, "many">;
}, "strip", z.ZodTypeAny, {
    requestId: string;
    items: ({
        requestType: "oneTimeAccountsRead";
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    } | {
        requestType: "oneTimeAccountsRead";
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    } | {
        requestType: "ongoingAccountsRead";
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    } | {
        requestType: "ongoingAccountsRead";
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    } | {
        requestType: "oneTimePersonaDataRead";
        fields: {
            value: string;
            field: string;
        }[];
    } | {
        requestType: "ongoingPersonaDataRead";
        fields: {
            value: string;
            field: string;
        }[];
    } | {
        requestType: "usePersonaRead";
        id: string;
    } | {
        requestType: "loginRead";
        personaId: string;
    } | {
        challenge: string;
        signature: string;
        requestType: "loginRead";
        personaId: string;
        publicKey: string;
        identityComponentAddress: string;
    } | {
        requestType: "sendTransactionWrite";
        transactionIntentHash: string;
    })[];
}, {
    requestId: string;
    items: ({
        requestType: "oneTimeAccountsRead";
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    } | {
        requestType: "oneTimeAccountsRead";
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    } | {
        requestType: "ongoingAccountsRead";
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    } | {
        requestType: "ongoingAccountsRead";
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    } | {
        requestType: "oneTimePersonaDataRead";
        fields: {
            value: string;
            field: string;
        }[];
    } | {
        requestType: "ongoingPersonaDataRead";
        fields: {
            value: string;
            field: string;
        }[];
    } | {
        requestType: "usePersonaRead";
        id: string;
    } | {
        requestType: "loginRead";
        personaId: string;
    } | {
        challenge: string;
        signature: string;
        requestType: "loginRead";
        personaId: string;
        publicKey: string;
        identityComponentAddress: string;
    } | {
        requestType: "sendTransactionWrite";
        transactionIntentHash: string;
    })[];
}>;
export declare const WalletResponseSchema: z.ZodUnion<[z.ZodObject<{
    requestId: z.ZodString;
    items: z.ZodArray<z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        requestType: z.ZodLiteral<"oneTimeAccountsRead">;
        accounts: z.ZodArray<z.ZodObject<{
            account: z.ZodObject<{
                address: z.ZodString;
                label: z.ZodString;
                appearanceId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                address: string;
                label: string;
                appearanceId: number;
            }, {
                address: string;
                label: string;
                appearanceId: number;
            }>;
            challenge: z.ZodString;
            signature: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }, {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        requestType: "oneTimeAccountsRead";
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    }, {
        requestType: "oneTimeAccountsRead";
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    }>, z.ZodObject<{
        requestType: z.ZodLiteral<"oneTimeAccountsRead">;
        accounts: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        requestType: "oneTimeAccountsRead";
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    }, {
        requestType: "oneTimeAccountsRead";
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    }>]>, z.ZodUnion<[z.ZodObject<{
        requestType: z.ZodLiteral<"ongoingAccountsRead">;
        accounts: z.ZodArray<z.ZodObject<{
            account: z.ZodObject<{
                address: z.ZodString;
                label: z.ZodString;
                appearanceId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                address: string;
                label: string;
                appearanceId: number;
            }, {
                address: string;
                label: string;
                appearanceId: number;
            }>;
            challenge: z.ZodString;
            signature: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }, {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        requestType: "ongoingAccountsRead";
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    }, {
        requestType: "ongoingAccountsRead";
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    }>, z.ZodObject<{
        requestType: z.ZodLiteral<"ongoingAccountsRead">;
        accounts: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        requestType: "ongoingAccountsRead";
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    }, {
        requestType: "ongoingAccountsRead";
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    }>]>, z.ZodObject<{
        requestType: z.ZodLiteral<"oneTimePersonaDataRead">;
        fields: z.ZodArray<z.ZodObject<{
            field: z.ZodString;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
            field: string;
        }, {
            value: string;
            field: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        requestType: "oneTimePersonaDataRead";
        fields: {
            value: string;
            field: string;
        }[];
    }, {
        requestType: "oneTimePersonaDataRead";
        fields: {
            value: string;
            field: string;
        }[];
    }>, z.ZodObject<{
        requestType: z.ZodLiteral<"ongoingPersonaDataRead">;
        fields: z.ZodArray<z.ZodObject<{
            field: z.ZodString;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
            field: string;
        }, {
            value: string;
            field: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        requestType: "ongoingPersonaDataRead";
        fields: {
            value: string;
            field: string;
        }[];
    }, {
        requestType: "ongoingPersonaDataRead";
        fields: {
            value: string;
            field: string;
        }[];
    }>, z.ZodObject<{
        requestType: z.ZodLiteral<"usePersonaRead">;
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        requestType: "usePersonaRead";
        id: string;
    }, {
        requestType: "usePersonaRead";
        id: string;
    }>, z.ZodUnion<[z.ZodObject<{
        requestType: z.ZodLiteral<"loginRead">;
        personaId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        requestType: "loginRead";
        personaId: string;
    }, {
        requestType: "loginRead";
        personaId: string;
    }>, z.ZodObject<{
        requestType: z.ZodLiteral<"loginRead">;
        personaId: z.ZodString;
        challenge: z.ZodString;
        publicKey: z.ZodString;
        signature: z.ZodString;
        identityComponentAddress: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        challenge: string;
        signature: string;
        requestType: "loginRead";
        personaId: string;
        publicKey: string;
        identityComponentAddress: string;
    }, {
        challenge: string;
        signature: string;
        requestType: "loginRead";
        personaId: string;
        publicKey: string;
        identityComponentAddress: string;
    }>]>, z.ZodObject<{
        requestType: z.ZodLiteral<"sendTransactionWrite">;
        transactionIntentHash: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        requestType: "sendTransactionWrite";
        transactionIntentHash: string;
    }, {
        requestType: "sendTransactionWrite";
        transactionIntentHash: string;
    }>]>, "many">;
}, "strip", z.ZodTypeAny, {
    requestId: string;
    items: ({
        requestType: "oneTimeAccountsRead";
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    } | {
        requestType: "oneTimeAccountsRead";
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    } | {
        requestType: "ongoingAccountsRead";
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    } | {
        requestType: "ongoingAccountsRead";
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    } | {
        requestType: "oneTimePersonaDataRead";
        fields: {
            value: string;
            field: string;
        }[];
    } | {
        requestType: "ongoingPersonaDataRead";
        fields: {
            value: string;
            field: string;
        }[];
    } | {
        requestType: "usePersonaRead";
        id: string;
    } | {
        requestType: "loginRead";
        personaId: string;
    } | {
        challenge: string;
        signature: string;
        requestType: "loginRead";
        personaId: string;
        publicKey: string;
        identityComponentAddress: string;
    } | {
        requestType: "sendTransactionWrite";
        transactionIntentHash: string;
    })[];
}, {
    requestId: string;
    items: ({
        requestType: "oneTimeAccountsRead";
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    } | {
        requestType: "oneTimeAccountsRead";
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    } | {
        requestType: "ongoingAccountsRead";
        accounts: {
            account: {
                address: string;
                label: string;
                appearanceId: number;
            };
            challenge: string;
            signature: string;
        }[];
    } | {
        requestType: "ongoingAccountsRead";
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
    } | {
        requestType: "oneTimePersonaDataRead";
        fields: {
            value: string;
            field: string;
        }[];
    } | {
        requestType: "ongoingPersonaDataRead";
        fields: {
            value: string;
            field: string;
        }[];
    } | {
        requestType: "usePersonaRead";
        id: string;
    } | {
        requestType: "loginRead";
        personaId: string;
    } | {
        challenge: string;
        signature: string;
        requestType: "loginRead";
        personaId: string;
        publicKey: string;
        identityComponentAddress: string;
    } | {
        requestType: "sendTransactionWrite";
        transactionIntentHash: string;
    })[];
}>, z.ZodObject<{
    requestId: z.ZodString;
    error: z.ZodLiteral<"rejectedByUser">;
    message: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message?: string | undefined;
    requestId: string;
    error: "rejectedByUser";
}, {
    message?: string | undefined;
    requestId: string;
    error: "rejectedByUser";
}>]>;
export type Account = z.infer<typeof AccountSchema>;
export type AccountWithProofOfOwnership = z.infer<typeof AccountWithProofOfOwnershipSchema>;
export type Metadata = z.infer<typeof MetadataSchema>;
export type PersonaDataField = z.infer<typeof PersonaDataFieldSchema>;
export type OneTimeAccountsReadRequestItem = z.infer<typeof OneTimeAccountsReadRequestItemSchema>;
export type OneTimeAccountsWithoutProofOfOwnershipResponseItem = z.infer<typeof OneTimeAccountsWithoutProofOfOwnershipResponseItemSchema>;
export type OneTimeAccountsWithProofOfOwnershipResponseItem = z.infer<typeof OneTimeAccountsWithProofOfOwnershipResponseItemSchema>;
export type OneTimeAccountsResponseItem = z.infer<typeof OneTimeAccountsResponseItemSchema>;
export type OngoingAccountsReadRequestItem = z.infer<typeof OngoingAccountsReadRequestItemSchema>;
export type OngoingAccountsResponseItem = z.infer<typeof OngoingAccountsResponseItemSchema>;
export type OneTimePersonaDataReadRequestItem = z.infer<typeof OneTimePersonaDataReadRequestItemSchema>;
export type OneTimePersonaDataResponseItem = z.infer<typeof OneTimePersonaDataResponseItemSchema>;
export type OngoingPersonaDataReadRequestItem = z.infer<typeof OngoingPersonaDataReadRequestItemSchema>;
export type OngoingPersonaDataResponseItem = z.infer<typeof OngoingPersonaDataResponseItemSchema>;
export type UsePersonaReadRequestItem = z.infer<typeof UsePersonaReadRequestItemSchema>;
export type UsePersonaResponseItem = z.infer<typeof UsePersonaResponseItemSchema>;
export type LoginReadRequestItem = z.infer<typeof LoginReadRequestItemSchema>;
export type LoginWithChallengeResponseItem = z.infer<typeof LoginWithChallengeResponseItemSchema>;
export type LoginWithoutChallengeResponseItem = z.infer<typeof LoginWithoutChallengeResponseItemSchema>;
export type LoginResponseItem = z.infer<typeof LoginResponseItemSchema>;
export type SendTransactionWriteRequestItem = z.infer<typeof SendTransactionWriteRequestItemSchema>;
export type SendTransactionResponseItem = z.infer<typeof SendTransactionResponseItemSchema>;
export type RequestItem = z.infer<typeof RequestItemSchema>;
export type ResponseItem = z.infer<typeof ResponseItemSchema>;
export type WalletRequest = z.infer<typeof WalletRequestSchema>;
export type WalletResponse = z.infer<typeof WalletResponseSchema>;
export type WalletSuccessResponse = z.infer<typeof WalletSuccessResponseSchema>;
export {};
