export type MessageClientType = ReturnType<typeof MessageClient>;
export declare const MessageClient: (subjects?: {
    outgoingMessageSubject: import("rxjs").Subject<{
        requestId: string;
        items: ({
            numberOfAccounts?: number | undefined;
            requestType: "oneTimeAccountsRead";
            requiresProofOfOwnership: boolean;
        } | {
            message?: string | undefined;
            blobs?: string[] | undefined;
            requestType: "sendTransactionWrite";
            transactionManifest: string;
            version: number;
        })[];
        metadata: {
            networkId: number;
            dAppId: string;
        };
    }>;
    incomingMessageSubject: import("rxjs").Subject<{
        requestId: string;
        items: ({
            requestType: "oneTimeAccountsRead";
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        } | {
            requestType: "oneTimeAccountsRead";
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        } | {
            requestType: "ongoingAccountsRead";
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        } | {
            requestType: "ongoingAccountsRead";
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        } | {
            requestType: "oneTimePersonaDataRead";
            fields: {
                value: string;
                field: string;
            }[];
        } | {
            requestType: "ongoingPersonaDataRead";
            fields: {
                value: string;
                field: string;
            }[];
        } | {
            requestType: "usePersonaRead";
            id: string;
        } | {
            requestType: "loginRead";
            personaId: string;
        } | {
            challenge: string;
            signature: string;
            requestType: "loginRead";
            personaId: string;
            publicKey: string;
            identityComponentAddress: string;
        } | {
            requestType: "sendTransactionWrite";
            transactionIntentHash: string;
        })[];
    } | {
        message?: string | undefined;
        requestId: string;
        error: "rejectedByUser";
    } | {
        eventType: "receivedByExtension";
        requestId: string;
    }>;
    responseSubject: import("rxjs").Subject<{
        requestId: string;
        items: ({
            requestType: "oneTimeAccountsRead";
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        } | {
            requestType: "oneTimeAccountsRead";
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        } | {
            requestType: "ongoingAccountsRead";
            accounts: {
                account: {
                    address: string;
                    label: string;
                    appearanceId: number;
                };
                challenge: string;
                signature: string;
            }[];
        } | {
            requestType: "ongoingAccountsRead";
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        } | {
            requestType: "oneTimePersonaDataRead";
            fields: {
                value: string;
                field: string;
            }[];
        } | {
            requestType: "ongoingPersonaDataRead";
            fields: {
                value: string;
                field: string;
            }[];
        } | {
            requestType: "usePersonaRead";
            id: string;
        } | {
            requestType: "loginRead";
            personaId: string;
        } | {
            challenge: string;
            signature: string;
            requestType: "loginRead";
            personaId: string;
            publicKey: string;
            identityComponentAddress: string;
        } | {
            requestType: "sendTransactionWrite";
            transactionIntentHash: string;
        })[];
    } | {
        message?: string | undefined;
        requestId: string;
        error: "rejectedByUser";
    } | import("../helpers/error").SdkError>;
    messageLifeCycleEventSubject: import("rxjs").Subject<{
        eventType: "receivedByExtension";
        requestId: string;
    }>;
    dispatchEventSubject: import("rxjs").Subject<import("./_types").MessageDispatch>;
}) => {
    destroy: () => void;
    subjects: {
        outgoingMessageSubject: import("rxjs").Subject<{
            requestId: string;
            items: ({
                numberOfAccounts?: number | undefined;
                requestType: "oneTimeAccountsRead";
                requiresProofOfOwnership: boolean;
            } | {
                message?: string | undefined;
                blobs?: string[] | undefined;
                requestType: "sendTransactionWrite";
                transactionManifest: string;
                version: number;
            })[];
            metadata: {
                networkId: number;
                dAppId: string;
            };
        }>;
        incomingMessageSubject: import("rxjs").Subject<{
            requestId: string;
            items: ({
                requestType: "oneTimeAccountsRead";
                accounts: {
                    account: {
                        address: string;
                        label: string;
                        appearanceId: number;
                    };
                    challenge: string;
                    signature: string;
                }[];
            } | {
                requestType: "oneTimeAccountsRead";
                accounts: {
                    address: string;
                    label: string;
                    appearanceId: number;
                }[];
            } | {
                requestType: "ongoingAccountsRead";
                accounts: {
                    account: {
                        address: string;
                        label: string;
                        appearanceId: number;
                    };
                    challenge: string;
                    signature: string;
                }[];
            } | {
                requestType: "ongoingAccountsRead";
                accounts: {
                    address: string;
                    label: string;
                    appearanceId: number;
                }[];
            } | {
                requestType: "oneTimePersonaDataRead";
                fields: {
                    value: string;
                    field: string;
                }[];
            } | {
                requestType: "ongoingPersonaDataRead";
                fields: {
                    value: string;
                    field: string;
                }[];
            } | {
                requestType: "usePersonaRead";
                id: string;
            } | {
                requestType: "loginRead";
                personaId: string;
            } | {
                challenge: string;
                signature: string;
                requestType: "loginRead";
                personaId: string;
                publicKey: string;
                identityComponentAddress: string;
            } | {
                requestType: "sendTransactionWrite";
                transactionIntentHash: string;
            })[];
        } | {
            message?: string | undefined;
            requestId: string;
            error: "rejectedByUser";
        } | {
            eventType: "receivedByExtension";
            requestId: string;
        }>;
        responseSubject: import("rxjs").Subject<{
            requestId: string;
            items: ({
                requestType: "oneTimeAccountsRead";
                accounts: {
                    account: {
                        address: string;
                        label: string;
                        appearanceId: number;
                    };
                    challenge: string;
                    signature: string;
                }[];
            } | {
                requestType: "oneTimeAccountsRead";
                accounts: {
                    address: string;
                    label: string;
                    appearanceId: number;
                }[];
            } | {
                requestType: "ongoingAccountsRead";
                accounts: {
                    account: {
                        address: string;
                        label: string;
                        appearanceId: number;
                    };
                    challenge: string;
                    signature: string;
                }[];
            } | {
                requestType: "ongoingAccountsRead";
                accounts: {
                    address: string;
                    label: string;
                    appearanceId: number;
                }[];
            } | {
                requestType: "oneTimePersonaDataRead";
                fields: {
                    value: string;
                    field: string;
                }[];
            } | {
                requestType: "ongoingPersonaDataRead";
                fields: {
                    value: string;
                    field: string;
                }[];
            } | {
                requestType: "usePersonaRead";
                id: string;
            } | {
                requestType: "loginRead";
                personaId: string;
            } | {
                challenge: string;
                signature: string;
                requestType: "loginRead";
                personaId: string;
                publicKey: string;
                identityComponentAddress: string;
            } | {
                requestType: "sendTransactionWrite";
                transactionIntentHash: string;
            })[];
        } | {
            message?: string | undefined;
            requestId: string;
            error: "rejectedByUser";
        } | import("../helpers/error").SdkError>;
        messageLifeCycleEventSubject: import("rxjs").Subject<{
            eventType: "receivedByExtension";
            requestId: string;
        }>;
        dispatchEventSubject: import("rxjs").Subject<import("./_types").MessageDispatch>;
    };
};
