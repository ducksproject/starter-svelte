import { ResultAsync } from 'neverthrow';
import { SdkError } from './helpers/error';
import { Metadata, WalletRequest, WalletSuccessResponse } from './IO/schemas';
import { CallbackFns } from './messages/events/_types';
import { Method } from './_types';
type SendWalletRequest = (callbackFns: Partial<CallbackFns>) => (message: WalletRequest) => ResultAsync<WalletSuccessResponse, SdkError>;
export declare const createMethods: (metadata: Metadata, sendMessageToWallet: SendWalletRequest) => {
    request: <Input extends Partial<{
        oneTimeAccountsWithoutProofOfOwnership: {
            numberOfAccounts?: number | undefined;
        };
    }>, Output extends keyof Input extends "oneTimeAccountsWithoutProofOfOwnership" ? { [Key in keyof Input]: (x: {
        oneTimeAccountsWithoutProofOfOwnership: {
            oneTimeAccounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
        };
    }[Key]) => void; }[keyof Input] extends (x: infer T) => void ? T : never : never>(input: Input, callbackFns?: Partial<CallbackFns>) => ResultAsync<Output, SdkError>;
    sendTransaction: (input: Method['sendTransaction']['input'], callbackFns?: Partial<CallbackFns>) => ResultAsync<{
        transactionIntentHash: string;
    }, SdkError>;
};
export {};
